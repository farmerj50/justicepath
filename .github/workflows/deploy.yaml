name: Deploy monorepo to Cloud Run

on:
  workflow_dispatch:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

permissions:
  id-token: write
  contents: read

concurrency:
  group: deploy-${{ github.ref_name }}
  cancel-in-progress: true

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      PROJECT_ID: ${{ vars.GCP_PROJECT_ID }}
      REGION: ${{ vars.GCP_REGION }}             # e.g., us-east1
      AR_LOCATION: ${{ vars.AR_LOCATION }}       # e.g., us
      AR_REPO: ${{ vars.AR_REPO }}               # e.g., artifact-registry-repo
      BACKEND_DIR: justicepath-backend
      FRONTEND_DIR: .

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Auth to Google Cloud (OIDC)
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ vars.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ vars.SERVICE_ACCOUNT_EMAIL }}

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ env.AR_LOCATION }}-docker.pkg.dev --quiet

      - name: Validate monorepo layout
        shell: bash
        run: |
          echo "BACKEND_DIR=${BACKEND_DIR}"
          echo "FRONTEND_DIR=${FRONTEND_DIR}"
          echo "---- repo root ----"; ls -la
          echo "---- backend dir ----"; ls -la "$BACKEND_DIR"
          test -d "$BACKEND_DIR"  || { echo "Missing $BACKEND_DIR"; exit 1; }
          test -d "$FRONTEND_DIR" || { echo "Missing $FRONTEND_DIR"; exit 1; }
          test -f "$BACKEND_DIR/Dockerfile"  || { echo "No Dockerfile in $BACKEND_DIR"; exit 1; }
          test -f "$FRONTEND_DIR/Dockerfile" || { echo "No Dockerfile in $FRONTEND_DIR"; exit 1; }

      # -------------------------------
      # Build & deploy API
      # -------------------------------
      - name: Build & push API image
        id: build_api
        env:
          IMAGE_API_TAG: ${{ env.AR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.AR_REPO }}/${{ vars.CR_SERVICE_API }}:${{ github.sha }}
        run: |
          set -e
          docker build --no-cache --pull \
            -f "$BACKEND_DIR/Dockerfile" \
            -t "$IMAGE_API_TAG" "$BACKEND_DIR"
          docker push "$IMAGE_API_TAG"
          # Record immutable digest for deploy
          API_DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' "$IMAGE_API_TAG")
          echo "digest=$API_DIGEST" >> "$GITHUB_OUTPUT"

      - name: Deploy API
        id: deploy_api
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ${{ vars.CR_SERVICE_API }}
          region: ${{ env.REGION }}
          # Deploy by digest (immutable)
          image: ${{ steps.build_api.outputs.digest }}
          revision_traffic: LATEST=100
          env_vars_update_strategy: merge
          env_vars: |
            NODE_ENV=production
            CORS_ALLOWLIST_JSON=${{ vars.CORS_ALLOWLIST_JSON }}
            OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
            STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }}
            DATABASE_URL=${{ secrets.DATABASE_URL }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
          flags: --allow-unauthenticated

      # -------------------------------
      # Build WEB with correct API URL
      # -------------------------------
      - name: Decide API base for frontend
        id: decide_api
        shell: bash
        run: |
          # Prefer deployed API URL; fallback to /api (LB path routing)
          if [ "${{ github.ref_name }}" = "main" ]; then
          API_BASE="/api"
          else
          [ -z "$API_BASE" ] && API_BASE="/api"
          if
          echo "api_base=$API_BASE" >> "$GITHUB_OUTPUT"
          echo "::notice::Using API base: $API_BASE"

      - name: Build & push WEB image
        id: build_web
        env:
          IMAGE_WEB_TAG: ${{ env.AR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.AR_REPO }}/${{ vars.CR_SERVICE_WEB }}:${{ github.sha }}
          API_BASE: ${{ steps.decide_api.outputs.api_base }}
          FRONTEND_DIR: ${{ env.FRONTEND_DIR }}
        run: |
          set -e
          echo ">>> CI: API_BASE=$API_BASE"
          test -n "$API_BASE" || { echo "ERROR: API_BASE empty"; exit 1; }

          docker build --no-cache --pull \
            --build-arg VITE_API_URL="$API_BASE" \
            -f "$FRONTEND_DIR/Dockerfile" \
            -t "$IMAGE_WEB_TAG" "$FRONTEND_DIR"

          # Prove VITE_API_URL was baked into the image
          docker run --rm -e EXPECT="$API_BASE" "$IMAGE_WEB_TAG" sh -lc '
            echo ">>> Verifying API URL in dist..."
            grep -R --binary-files=text -n "$EXPECT" dist >/dev/null || {
            echo "API URL not found in built assets";
            echo "Tip: ensure Dockerfile writes .env.production before \`npm run build\`.";
            exit 1; 
            }
            echo ">>> OK: API URL found in built assets"
          '

          docker push "$IMAGE_WEB_TAG"
          WEB_DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' "$IMAGE_WEB_TAG")
          echo "digest=$WEB_DIGEST" >> "$GITHUB_OUTPUT"

      - name: Deploy WEB
        id: deploy_web
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ${{ vars.CR_SERVICE_WEB }}
          region: ${{ env.REGION }}
          # Deploy by digest (immutable)
          image: ${{ steps.build_web.outputs.digest }}
          revision_traffic: LATEST=100
          flags: --allow-unauthenticated

      # -------------------------------
      # Patch API CORS with the live WEB URL
      # -------------------------------
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Build allowlist (domains + live WEB url)
        id: cors
        shell: bash
        run: |
          set -e
          WEB_URL="${{ steps.deploy_web.outputs.url }}"
          ALLOW=$(jq -cn \
            --arg a https://justicepathlaw.com \
            --arg b https://www.justicepathlaw.com \
            --arg c "$WEB_URL" \
            '[$a,$b,$c]')
          echo "ALLOW=$ALLOW" >> "$GITHUB_OUTPUT"
          echo "::notice::CORS_ALLOWLIST_JSON=$ALLOW"

      - name: Patch API CORS_ALLOWLIST_JSON
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ${{ vars.CR_SERVICE_API }}
          region:  ${{ env.REGION }}
          image:   ${{ steps.build_api.outputs.digest }}
          env_vars_update_strategy: merge
          env_vars: |
            CORS_ALLOWLIST_JSON=${{ steps.cors.outputs.ALLOW }}

      - name: Output URLs
        run: |
          echo "API URL: ${{ steps.deploy_api.outputs.url }}"
          echo "WEB URL: ${{ steps.deploy_web.outputs.url }}"
